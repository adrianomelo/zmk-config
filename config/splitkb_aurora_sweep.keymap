/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping-term-ms = <200>;

    tapping-term-ms = <500>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_rcmd {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RIGHT_COMMAND>;
        };

        combo_lcmd {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LEFT_COMMAND>;
        };

        combo_loption {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LEFT_ALT>;
        };

        combo_roption {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RIGHT_ALT>;
        };

        combo_rcontrol {
            bindings = <&kp RIGHT_CONTROL>;
            key-positions = <18 19>;
        };

        combo_lcontrol {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <10 11>;
        };

        combo_lshift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <20 21>;
        };

        combo_rshift {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <29 28>;
        };

        combo_toggle1 {
            bindings = <&sl 1>;
            key-positions = <5 6>;
        };

        combo_layer2 {
            bindings = <&sl 2>;
            key-positions = <6 7>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W          &kp E  &kp R  &kp T    &kp Y  &kp U  &kp I      &kp O    &kp P
&kp A      &kp S          &kp D  &kp F  &kp G    &kp H  &kp J  &kp K      &kp L    &kp SEMICOLON
&kp Z      &kp X          &kp C  &kp V  &kp B    &kp N  &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp SPACE  &kp BACKSPACE                                                  &kp TAB  &kp RET
            >;
        };

        left_layer {
            bindings = <
&kp N1   &kp N2     &kp N3           &kp N4           &kp N5        &kp N6     &kp N7     &kp N8    &kp N9    &kp N0
&kp TAB  &kp LC(S)  &kp DQT          &kp PIPE2        &kp HASH      &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT  &kp DEL
&kp ESC  &kp TILDE  &kp NON_US_BSLH  &kp NON_US_HASH  &kp TILDE2    &kp MINUS  &kp GRAVE  &kp LBKT  &kp RBKT  &kp DEL
&mo 1    &kp LGUI                                                                                   &kp RGUI  &mo 2
            >;
        };

        right_layer {
            bindings = <
&kp EXCL   &kp AT       &kp HASH  &kp DLLR   &kp PRCNT    &kp CARET  &kp AMPS      &kp KP_MULTIPLY  &kp LPAR   &kp RPAR
&kp HASH   &kp QMARK    &kp FSLH  &kp COLON  &kp SEMI     &kp MINUS  &kp KP_EQUAL  &kp LBRC         &kp RBRC   &kp BSPC
&kp LSHFT  &kp KP_PLUS  &kp LBKT  &kp RBKT   &kp BSLH     &kp UNDER  &kp LEFT      &kp DOWN         &kp UP     &kp RIGHT
&mo 3      &kp LCTRL                                                                                &kp SPACE  &mo 2
            >;
        };

        tri_layer {
            bindings = <
&kp N1      &kp N2      &kp N3      &kp N4  &kp N5    &trans  &trans     &trans        &trans      &trans
&kp F1      &kp F2      &kp F3      &kp F4  &kp F5    &trans  &kp PG_UP  &kp K_VOL_UP  &kp K_MUTE  &trans
&bt BT_CLR  &bt BT_NXT  &bt BT_PRV  &kp F6  &kp F7    &trans  &kp PG_DN  &kp K_VOL_DN  &trans      &trans
&trans      &trans                                                                     &trans      &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans                                                    &trans  &trans
            >;
        };
    };
};
